import { generateDocument } from "@/components/Pdf";
import { useFormInput } from "@/hooks/useFormInput";
import styles from "@/styles/Home.module.css";
import { pdf } from "@react-pdf/renderer";
import { saveAs } from "file-saver";
import { Inter } from "next/font/google";
import Head from "next/head";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const caseNumber = useFormInput("");
  const courtInformation = useFormInput("");
  const dateOfMinting = useFormInput("");
  const defendantNames = useFormInput("");
  const transactionTimestamp = useFormInput("");
  const blockchainName = useFormInput("");
  const mintersAddr = useFormInput("");
  const smartContractAddr = useFormInput("");
  const serviceAddr = useFormInput("");
  const blockNumber = useFormInput("");
  const transactionHash = useFormInput("");
  const mintersName = useFormInput("");
  const email = useFormInput("");

  const handleSubmit = async () => {
    const pdfFile = await pdf(
      generateDocument({
        caseNumber: caseNumber.value,
        courtInformation: courtInformation.value,
        dateOfMinting: dateOfMinting.value,
        defendantNames: [defendantNames.value],
        transactionTimestamp: transactionTimestamp.value,
        blockchainName: blockchainName.value,
        mintersAddr: mintersAddr.value,
        smartContractAddr: smartContractAddr.value,
        serviceAddr: serviceAddr.value,
        blockNumber: blockNumber.value,
        transactionHash: transactionHash.value,
        mintersName: mintersName.value,
      })
    ).toBlob();

    const emailContent = {
      to: email.value,
      subject: "BlockServe - Proof Of Service Affidavit",
      content: "Attached to this email is the Proof of Service Certificate",
      attachments: [
        {
          content: await blobToBase64(pdfFile),
          type: "application/pdf",
          filename: "ProofOfServiceAffidavit.pdf",
        },
      ],
    };

    await fetch("/api/sendmail", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(emailContent),
    });

    saveAs(pdfFile, "ProofOfServiceAffidavit.pdf");
  };

  function blobToBase64(blob: Blob) {
    const reader = new FileReader();
    reader.readAsDataURL(blob);
    return new Promise((resolve) => {
      reader.onloadend = () => {
        resolve(
          (reader.result as string).replace("data:application/pdf;base64,", "")
        );
      };
    });
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div>
          Case Number: <input type="text" {...caseNumber} />
        </div>
        <div>
          Court Information: <input type="text" {...courtInformation} />
        </div>
        <div>
          Date of Minting: <input type="text" {...dateOfMinting} />
        </div>
        <div>
          Defendant Names: <input type="text" {...defendantNames} />
        </div>
        <div>
          Transaction Timestamp: <input type="text" {...transactionTimestamp} />
        </div>
        <div>
          Blockchain Name: <input type="text" {...blockchainName} />
        </div>
        <div>
          Minter's Address: <input type="text" {...mintersAddr} />
        </div>
        <div>
          Smart Contract Address: <input type="text" {...smartContractAddr} />
        </div>
        <div>
          Service Address: <input type="text" {...serviceAddr} />
        </div>
        <div>
          Block Number: <input type="text" {...blockNumber} />
        </div>
        <div>
          Transaction Hash: <input type="text" {...transactionHash} />
        </div>
        <div>
          Minter's Name: <input type="text" {...mintersName} />
        </div>
        <div>
          E-mail: <input type="text" {...email} />
        </div>
        <div>
          <input type="button" value="download" onClick={handleSubmit} />
        </div>
        {/* <div style={{ width: "100%", height: "1000px" }}>
          <PDFViewer width={"100%"} height={1000}>
            {generateDocument({
              caseNumber: caseNumber.value,
              courtInformation: courtInformation.value,
              dateOfMinting: dateOfMinting.value,
              defendantNames: [defendantNames.value],
              transactionTimestamp: transactionTimestamp.value,
              blockchainName: blockchainName.value,
              mintersAddr: mintersAddr.value,
              smartContractAddr: smartContractAddr.value,
              serviceAddr: serviceAddr.value,
              blockNumber: blockNumber.value,
              transactionHash: transactionHash.value,
              mintersName: mintersName.value,
            })}
          </PDFViewer>
        </div> */}
      </main>
    </>
  );
}
